#include <stdio.h>
#include <stdint.h>
#include "mips32.h"
#include "elf.h"

#define ERROR_INVALID_ARGS "You need 2 arguments\n"
#define ERROR_IO_ERROR "The file could not be read\n"
#define ERROR_CLOSE_FILE "The file could not be closed\n"
#define ERROR_UNKNOWN_OPCODE -1

#define AT regs[1]
#define V0 regs[2]
#define V1 regs[3]
#define SP regs[29]
#define RA regs[31]
#define MEMSZ 655360

static uint32_t PC;
static size_t instr_cnt;
static uint32_t regs[32];
static unsigned char mem[MEMSZ];

/* Prints the amount of instructions executed */
void show_status() {

  printf("Executed %zu instruction(s).\n", instr_cnt);
  printf("pc = 0x%x\n", PC);
  printf("at = 0x%x\n", AT);
  printf("v0 = 0x%x\n", V0);
  printf("v1 = 0x%x\n", V1);
  printf("t0 = 0x%x\n", regs[8]);
  printf("t1 = 0x%x\n", regs[9]);
  printf("t2 = 0x%x\n", regs[10]);
  printf("t3 = 0x%x\n", regs[11]);
  printf("t4 = 0x%x\n", regs[12]);
  printf("t5 = 0x%x\n", regs[13]);
  printf("t6 = 0x%x\n", regs[14]);
  printf("t7 = 0x%x\n", regs[15]);
  printf("sp = 0x%x\n", SP);
  printf("ra = 0x%x\n", RA);

}


/* Inserts config data into array */
int read_config_stream(FILE *stream) {

int i;

  for (i = 8; i < 16; i++){
    uint32_t v;
    fscanf(stream, "%u", &v);
    regs[i] = v;
  }

  return 0;
}


/* Opens and closes a file */
int read_config(const char *path) {

  FILE *stream = fopen(path, "r");
  if (stream != NULL){
    read_config_stream(stream);
    return 0;
  }
  else{
    printf(ERROR_IO_ERROR);
    return -1;
  }
    
  int close_file = fclose(stream);
      
  if (close_file != 0){
       printf(ERROR_CLOSE_FILE);
  }
  
  return 0;
}


/* Executes the R instructions */
int interp_r (uint32_t inst){

  uint32_t funct = GET_FUNCT(inst);
  uint32_t rs, rt, rd, shamt;
  rs    = GET_RS(inst);
  rt    = GET_RT(inst);
  rd    = GET_RD(inst);
  shamt = GET_SHAMT(inst);

  switch(funct)
  {
    case FUNCT_JR :
      break;

    case FUNCT_SYSCALL :
      return -1;
      break;

    case FUNCT_ADDU :
      regs[rd] = regs[rs] + regs[rt];
      break;

    case FUNCT_SUBU :
      regs[rd] = regs[rs] - regs[rt];
      break;

    case FUNCT_AND :
      regs[rd] = regs[rs] & regs[rt];
      break;

    case FUNCT_OR :
      regs[rd] = regs[rs] | regs[rt];
      break;

    case FUNCT_NOR :
      regs[rd] = ~(regs[rs] | regs[rt]);
      break;

    case FUNCT_SLT :
      if (regs[rs] < regs[rt])
        regs[rd] = 1;
      else 
        regs[rd] = 0;
      break;

    case FUNCT_SLL :
      regs[rd] = regs[rt] << shamt;
      break;

    case FUNCT_SRL :
      regs[rd] = regs[rt] >> shamt;
      break;

  }
  
  return 0;
}

int j(uint32_t inst){
  
  printf("Hej 0x%x\n", GET_ADDRESS(inst));
  
  return 0;
}

/* Identifies the instruction by looking at the opcode */
int interp_inst (uint32_t inst){

  uint32_t opcode = GET_OPCODE(inst);
  int retval;

  switch(opcode)
  {
    case OPCODE_R :
      retval = interp_r(inst);
      break;
    
    case OPCODE_J :
      j(inst);
      break;

    default :
      retval = ERROR_UNKNOWN_OPCODE;
      break;
  }
  return retval;
}


/* Runs an infinite loop and increments the PC after dealing with an instruction */
int interp(){

  int syscall = 0;

  while(!syscall){
  
    uint32_t inst = GET_BIGWORD(mem, PC);
    PC += 4;
    instr_cnt++;
    int retval = interp_inst(inst);
  
  if (retval == -1)
    syscall = 1;
  }
  return 0;
}

int main(int argc, char *argv[]) {
  
  if (argc == 3)
    read_config(argv[1]);
  else
    printf(ERROR_INVALID_ARGS);

  elf_dump(argv[2], &PC, &mem[0], MEMSZ);
  
  SP = MEMSZ - 4;

 /* uint32_t penis = GET_BIGWORD(mem, PC + 4);
  printf("%u\n", penis);*/
  
  interp();  
  printf("Jeg er v0: %d\n", regs[2]);
  show_status();

  return 0;
}
